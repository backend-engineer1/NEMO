# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2019, NVIDIA
# This file is distributed under the same license as the nemo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nemo 0.9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-03 17:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/tutorials/custommodules.rst:2
msgid "How to build Neural Module"
msgstr ""

#: ../../source/tutorials/custommodules.rst:5
msgid "Currently, NeMo only support PyTorch as a backend."
msgstr ""

#: ../../source/tutorials/custommodules.rst:7
msgid ""
"Neural Modules can be conceptually classified into 4 potentially "
"overlapping categories:"
msgstr ""

#: ../../source/tutorials/custommodules.rst:9
msgid ""
"**Trainable Modules** - modules that contain trainable weights. Inherit "
"from :class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` class."
msgstr ""

#: ../../source/tutorials/custommodules.rst:11
msgid ""
"**Data Layers** - modules that perform (extract, transform, load, feed) "
"ETLF of the data. Inherit from "
":class:`DataLayerNM<nemo.backends.pytorch.nm.DataLayerNM>` class."
msgstr ""

#: ../../source/tutorials/custommodules.rst:13
msgid ""
"**Loss Modules** - modules that compute loss functions. Inherit from "
":class:`LossNM<nemo.backends.pytorch.nm.LossNM>` class."
msgstr ""

#: ../../source/tutorials/custommodules.rst:15
msgid ""
"**Non Trainable Modules** - non-trainable module, for example, table "
"lookup, data augmentation, greedy decoder, etc. Inherit from "
":class:`NonTrainableNM<nemo.backends.pytorch.nm.NonTrainableNM>` class."
msgstr ""

#: ../../source/tutorials/custommodules.rst:18
msgid ""
"In Figure below you can see a class inheritance diagram for these helper "
"classes."
msgstr ""

#: ../../source/tutorials/custommodules.rst:23
msgid ""
"Inheritance class diagram. Provided API's classes are in green. Red "
"classes are to be implemented by user."
msgstr ""

#: ../../source/tutorials/custommodules.rst:26
msgid "Trainable Module"
msgstr ""

#: ../../source/tutorials/custommodules.rst:28
msgid ""
"Notice that :class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` "
"class has two base classes: "
":class:`NeuralModule<nemo.core.neural_modules.NeuralModule>` class and "
"``torch.nn.Module``."
msgstr ""

#: ../../source/tutorials/custommodules.rst:32
msgid "Define module from scratch"
msgstr ""

#: ../../source/tutorials/custommodules.rst:34
msgid ""
"Inherit from :class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` "
"class."
msgstr ""

#: ../../source/tutorials/custommodules.rst:35
msgid ""
"Create the ``create_ports()`` static method that defines your input and "
"output ports. If your ``create_ports()`` method requires some params, "
"pass it to the base class constructor as part of the ``create_port_args``"
" param."
msgstr ""

#: ../../source/tutorials/custommodules.rst:47
msgid "In the constructor, call base class constructor first"
msgstr ""

#: ../../source/tutorials/custommodules.rst:54
msgid "Implement ``forward`` method from ``torch.nn.Module``"
msgstr ""

#: ../../source/tutorials/custommodules.rst:57
msgid ""
"Input argument names to your ``forward`` method must match your module's "
"input port names exactly."
msgstr ""

#: ../../source/tutorials/custommodules.rst:60
msgid "Example 1"
msgstr ""

#: ../../source/tutorials/custommodules.rst:99
msgid "Converting from PyTorch's nn.Module"
msgstr ""

#: ../../source/tutorials/custommodules.rst:101
msgid ""
"If you already have PyTorch class which inherits from "
"``torch.nn.Module``, replace that inheritance with inheritance from "
":class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` class."
msgstr ""

#: ../../source/tutorials/custommodules.rst:103
msgid "Create the ``create_ports()`` static method"
msgstr ""

#: ../../source/tutorials/custommodules.rst:104
msgid "Modify your constructor to call base class constructor first."
msgstr ""

#: ../../source/tutorials/custommodules.rst:118
msgid ""
"Modify ``forward`` method so that its input arguments match your input "
"port names exactly."
msgstr ""

#: ../../source/tutorials/custommodules.rst:121
msgid "Data Layer Module"
msgstr ""

#: ../../source/tutorials/custommodules.rst:122
msgid ""
"Inherit from :class:`DataLayerNM<nemo.backends.pytorch.nm.DataLayerNM>` "
"class."
msgstr ""

#: ../../source/tutorials/custommodules.rst:123
msgid "Implement ``__len__`` method to return dataset size."
msgstr ""

#: ../../source/tutorials/custommodules.rst:124
msgid ""
"Implement either the ``dataset`` or ``data_iterator`` property to return "
"a PyTorch Dataset object or an iterator over your dataset, respectively. "
"(The unused property should return None.)"
msgstr ""

#: ../../source/tutorials/custommodules.rst:126
msgid ""
"When implementing constructor, you should first call base class "
"constructor and define *output ports only* in create_ports().  Also, "
"module should accept parameters such as ``batch_size`` and ``shuffle``."
msgstr ""

#: ../../source/tutorials/custommodules.rst:130
msgid ""
"If under the hood you are using ``torch.utils.data.Dataset`` class "
"(*recommended approach*), then you can implement the ``dataset`` "
"property, and a DataLoader will be created for you. (See example below)."
msgstr ""

#: ../../source/tutorials/custommodules.rst:134
#: ../../source/tutorials/custommodules.rst:199
msgid "Example"
msgstr ""

#: ../../source/tutorials/custommodules.rst:136
msgid ""
"This example wraps PyTorch's *ImageFolder* dataset into a neural module "
"data layer."
msgstr ""

#: ../../source/tutorials/custommodules.rst:190
msgid "Loss Neural Module"
msgstr ""

#: ../../source/tutorials/custommodules.rst:192
msgid "Inherit from :class:`LossNM<nemo.backends.pytorch.nm.LossNM>` class"
msgstr ""

#: ../../source/tutorials/custommodules.rst:193
msgid "Create create_ports() method"
msgstr ""

#: ../../source/tutorials/custommodules.rst:194
msgid "In your constructor, call base class constructor"
msgstr ""

#: ../../source/tutorials/custommodules.rst:195
msgid ""
"Implement "
":meth:`_loss_function<nemo.backends.pytorch.nm.LossNM._loss_function>` "
"method."
msgstr ""

