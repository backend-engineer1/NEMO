# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2019, NVIDIA
# This file is distributed under the same license as the nemo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nemo 0.9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-03 17:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/zh/tutorials/neuraltypes.rst:2
msgid "神经类型"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:4
msgid "神经类型是用来检查输入张量，确保两个神经模块是兼容的，并且捕捉语义和维度上的错误。"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:6
msgid ""
"神经类型在 :class:`NeuralType<nemo.core.neural_types.NeuralType>` "
"类中实现，它把张量的轴映射到 :class:`AxisType<nemo.core.neural_types.AxisType>`."
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:8
msgid ":class:`AxisType<nemo.core.neural_types.AxisType>` 每个轴有下列信息:"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:10
msgid ""
"Semantic Tag, 必须继承自 :class:`BaseTag<nemo.core.neural_types.BaseTag>`，比如 "
":class:`BatchTag<nemo.core.neural_types.BatchTag>`, "
":class:`ChannelTag<nemo.core.neural_types.ChannelTag>`, "
":class:`TimeTag<nemo.core.neural_types.TimeTag>` 等。这些标签是 `is-a` 的继承关系。"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:11
msgid "Dimension: 无符号整形"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:12
msgid "Descriptor: 字符串"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:15
msgid "初始化神经类型，你应该给它传递一个字典（轴到类型），把轴映射到它的AxisType。 比如，ResNet18的输入和输出端口可以这么描述："
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:30
msgid "**神经类型比较**"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:32
msgid ""
"两个 :class:`NeuralType<nemo.core.neural_types.NeuralType>` 对象可以通过 "
"``.compare`` 方法来进行比较。 结果是:"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:48
msgid "**特殊例子**"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:50
msgid "*Non-tensor* 对象应该用 ``NeuralType(None)`` 表示。"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:51
msgid "*Optional*: 输入是可选的，如果提供了类型输入，那么会自动做类型检测"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:52
msgid ""
"*Root* 类型可以用 ``NeuralType({})`` 表示: ``NeuralType({})`` "
"类型的端口必须可以接收任意的神经类型的神经模块张量(NmTensors):"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:59
msgid "参考 \"nemo/tests/test_neural_types.py\" 中更多的例子。"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:62
msgid "**神经类型帮助我们调试程序**"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:64
msgid "有许多的错误类型在运行和编译的时候不会报错，比如："
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:66
msgid "\"Rank matches but semantics doesn't\"."
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:68
msgid ""
"例如，模块A的数据格式是[Batch, Time, Dim]，但是模块B期望的格式是[Time, Batch, "
"Dim]。简单的轴转置就可以解决这个错误。"
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:70
msgid "\"Concatenating wrong dimensions\"."
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:72
msgid "例如, 模块应该根据0号维度合并(加)两个输入张量X和Y。但是张量X格式是[B, T, D]，但是张量Y格式是[T, B, D] 然后做合并 . ."
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:74
msgid "\"Dimensionality mismatch\""
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:76
msgid ""
"一个模块期望图片尺寸是224x224但是得到的是256x256。这种类型比较会导致 "
"``NeuralTypeComparisonResult.DIM_INCOMPATIBLE`` ."
msgstr ""

#: ../../source/zh/tutorials/neuraltypes.rst:79
msgid ""
"这个类型机制是由Python继承表示的。也就是说 "
":class:`NmTensor<nemo.core.neural_types.NmTensor>` 类继承自 "
":class:`NeuralType<nemo.core.neural_types.NeuralType>` 类。"
msgstr ""

