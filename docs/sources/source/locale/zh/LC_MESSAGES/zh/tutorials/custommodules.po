# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2019, NVIDIA
# This file is distributed under the same license as the nemo package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nemo 0.9.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-12-03 17:10+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/zh/tutorials/custommodules.rst:2
msgid "如何构建神经模块"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:5
msgid "目前，NeMo只支持Pytorch作为后端"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:7
msgid "神经模块根据概念可以分成4个有重叠的类目:"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:9
msgid ""
"**Trainable Modules** - 包含了有可训练权重的模块。继承自 "
":class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` 类。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:11
msgid ""
"**Data Layers** - 对数据做(extraction抽取, transform转换, load加载, feed接入) "
"ETLF操作的模块。继承自 :class:`DataLayerNM<nemo.backends.pytorch.nm.DataLayerNM>` "
"类。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:13
msgid ""
"**Loss Modules** - 计算损失函数的模块。继承自 "
":class:`LossNM<nemo.backends.pytorch.nm.LossNM>` 类。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:15
msgid ""
"**Non Trainable Modules** - 不可训练模块，比如，查表，数据增强，贪心解码器等。继承自 "
":class:`NonTrainableNM<nemo.backends.pytorch.nm.NonTrainableNM>` 类。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:18
msgid "在下面的图片中，你可以看到这些类的继承关系"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:23
msgid "继承类关系图。假设API's类是绿色的。红色类是用户将要执行的。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:26
msgid "可训练模块"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:28
msgid ""
"注意 :class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` 类 "
"有两个基础类：:class:`NeuralModule<nemo.core.neural_modules.NeuralModule>` 类 和 "
"``torch.nn.Module``."
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:32
msgid "从头定义模块"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:34
msgid "首先继承 :class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` 类。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:35
msgid ""
"创建 ``create_ports()`` 静态方法，定义输入输出端口 如果你的 ``create_ports()`` 方法需要一些参数，把它作为"
" ``create_port_args`` 的部分参数传递给基类的构造函数。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:47
msgid "在构造函数里，首先调用基类的构造函数"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:54
msgid "实现 ``torch.nn.Module`` 模块里的 ``forward`` 方法"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:57
msgid "你的 ``forward`` 方法的输入参数名必须匹配你的模块的输入的输入端口名。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:60
msgid "例子 1"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:96
msgid "转换PyTorch的nn.Module"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:98
msgid ""
"如果你已经有PyTorch的类继承自 ``torch.nn.Module``，把那个继承改成继承 "
":class:`TrainableNM<nemo.backends.pytorch.nm.TrainableNM>` 类。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:100
msgid "创建 ``create_ports()`` 静态方法"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:101
msgid "修改构造函数，首先调用基类构造函数"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:115
msgid "修改 ``forward`` 方法，使得它的输入参数和你的输入端口名字匹配。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:118
msgid "数据层模块"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:119
msgid "继承自 :class:`DataLayerNM<nemo.backends.pytorch.nm.DataLayerNM>` 类。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:120
msgid "实现 ``__len__`` 方法，返回数据集大小"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:121
msgid ""
"实现 ``dataset`` 或者 ``data_iterator`` "
"属性，返回一个PyTorch数据集对象或者你的数据集的迭代器。(没有使用的属性应该返回None)"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:123
msgid ""
"当实现构造函数的时候，你首先要调用基类构造函数，并且定义 在create_ports()定义*仅输出端口* 。另外，模块应该接收像是 "
"``batch_size`` 和 ``shuffle``的参数。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:127
msgid ""
"如果你使用了 ``torch.utils.data.Dataset`` 类 (*推荐方法*)，接着你可以实现 ``dataset`` "
"属性，一个数据加载器就会自动给你创建。 (见下面的例子)."
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:131
msgid "例子"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:133
msgid "这个例子把PyTorch的 *ImageFolder* 数据集封装成一个神经模块的数据层。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:187
msgid "损失函数神经模块"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:189
msgid "继承自 :class:`LossNM<nemo.backends.pytorch.nm.LossNM>` 类"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:190
msgid "创建create_ports()方法"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:191
msgid "在构造函数里调用基类构造函数"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:192
msgid ""
"实现 :meth:`_loss_function<nemo.backends.pytorch.nm.LossNM._loss_function>`"
" 方法。"
msgstr ""

#: ../../source/zh/tutorials/custommodules.rst:196
msgid "Example"
msgstr ""

