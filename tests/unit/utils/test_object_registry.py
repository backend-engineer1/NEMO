# ! /usr/bin/python
# -*- coding: utf-8 -*-
# =============================================================================
# Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =============================================================================

import pytest

from nemo.utils.neural_graph.object_registry import ObjectRegistry


class TestAppState:
    @pytest.mark.unit
    def test_registry(self):
        """ Tests registry reference management. """
        # Crete new registry.
        registry = ObjectRegistry("object")

        class MockupObjectClass:
            def __init__(self, name=None):
                # Store name generated by the registry.
                self.name = registry.register(self, name)

        # Test object uniqueness.
        c1 = MockupObjectClass("c1")
        c1_ref = registry["c1"]
        assert c1_ref is c1

        # Test name uniqueness.
        c2 = MockupObjectClass("c2")
        with pytest.raises(NameError):
            _ = MockupObjectClass("c2")

        # Test unique names generation.
        c3 = MockupObjectClass()
        c4 = MockupObjectClass()
        assert c4.name == "mockupobjectclass1"

        # Check objects.
        assert len(registry) == 4

        # Delete all objects - aside of reference!
        del c1
        del c2
        del c3
        del c4
        assert len(registry) == 1
        # Assert that "c1" is still there, but "c4" is not.
        registry["c1"]
        with pytest.raises(KeyError):
            registry["c4"]

        # Delete the last object.
        del c1_ref
        assert len(registry) == 0
