name: megatron_t5
restore_from_path: null # used when starting from a .nemo file

trainer:
  devices: 1
  num_nodes: 1
  accelerator: gpu
  precision: 16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: 1000 # PTL default. In practice, max_steps will be reached first. 
  max_steps: 100000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10
  val_check_interval: 100
  limit_val_batches: 50
  limit_test_batches: 500
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0
  benchmark: False

exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: megatron_t5
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 10
    mode: min
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    filename: 'megatron_t5--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}

model:
  # model parallelism 
  micro_batch_size: 4
  global_batch_size: 8 # will use more micro batches to reach global batch size
  tensor_model_parallel_size: 1
  pipeline_model_parallel_size: 1
  resume_from_checkpoint: null # manually set the checkpoint file to load from
  pipeline_model_parallel_split_rank: 0 # rank at which decoder starts.

  # model architecture
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler

  megatron_amp_O2: False # use AMP with O2 style mixed precision instead of native amp on-the-fly weight autocasting.
  grad_allreduce_chunk_size_mb: 125

  seq_length: 512
  max_position_embeddings: ${.seq_length}
  num_layers: 12 # For perceiver models, this is the number of cross-attention blocks. Each layer has 1 cross-attention and "num_self_attention_per_cross_attention" self-attention layers.
  hidden_size: 768
  ffn_hidden_size: 3072 # Transformer FFN hidden size. Usually 4 * hidden_size.
  num_attention_heads: 12
  init_method_std: 0.02 # Standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0.1 # Dropout probability for hidden state transformer.
  attention_dropout: 0.1 # Dropout probability in the attention layer.
  position_embedding_type: 'learned_absolute' # Position embedding type. Options ['learned_absolute', 'relative']
  relative_attention_num_buckets: 32 # Relative position number of buckets for computing the bias
  relative_attention_max_distance: 128 # max_distance to keep relative distance in the attention_num_buckets.
  kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-5
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  bias_activation_fusion: True # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
  grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce
  masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.
  bias_dropout_add_fusion: True # Use a kernel that fuses the bias addition, dropout and residual connection addition.
  bias: True # Whether to use bias terms in all weight matrices.
  normalization: 'layernorm' # Normalization layer to use. Options are 'layernorm', 'rmsnorm'
  encoder_arch: 'transformer' # Options: ['transformer', 'perceiver']
  decoder_arch: 'transformer' # Options: ['transformer']
  activation: 'gelu' # Options ['gelu', 'geglu', 'swiglu', 'reglu']
  headscale: False # Whether to learn extra parameters that scale the output of the each self-attention head.
  transformer_block_type: 'pre_ln' # Options ['pre_ln', 'post_ln', 'normformer']
  hidden_steps: 32 # Number of latent vectors to use for pereceiver encoders
  num_self_attention_per_cross_attention: 1 # Number of self-attention layers for every cross-attention layer.

  tokenizer:
    library: 'megatron'
    type: 'BertWordPieceCase'
    model: null
    vocab_file: null
    merge_file: null
    num_sentinel_tokens: 100

  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  fp32_residual_connection: False # Move residual connections to fp32
  fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

  # miscellaneous
  seed: 1234
  use_cpu_initialization: False # Init weights on the CPU (slow for large models)
  onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this

  # not implemented in NeMo yet
  activations_checkpoint_method: null # 'uniform', 'block'
  activations_checkpoint_num_layers: 1 

  data:
    # Path to data must be specified by the user.
    # can override from the CLI: "model.data.data_prefix=[.5,/raid/data/pile/my-t5_00_text_document,.5,/raid/data/pile/my-t5_01_text_document]",
    # Or see example below:
    # data_prefix: 
    #   - .5
    #   - /raid/data/pile/my-t5_00_text_document
    #   - .5
    #   - /raid/data/pile/my-t5_01_text_document
    data_prefix: ???
    index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
    data_impl: mmap
    splits_string: 949,45,5
    seq_length: ${model.seq_length}
    seq_length_dec: 128
    skip_warmup: True
    num_workers: 0
    dataloader_type: single # cyclic
    masked_lm_prob: 0.15
    dataset_type: 't5'
    short_seq_prob: 0.0
    max_ngram_size: 10
    mean_ngram_size: null
    geometric_dist: True
    permutation: False
    whole_word_masking: True
    favor_longer_ngrams: False

  optim:
    name: fused_adam
    lr: 0.0001
    betas:
      - 0.9
      - 0.999
    eps: 1e-8
    weight_decay: 0.01
    sched:
      name: WarmupAnnealing
      min_lr: 0.00001
      last_epoch: -1
      warmup_ratio: 0.01
