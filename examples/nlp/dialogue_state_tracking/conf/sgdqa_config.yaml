# Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


pretrained_model: null # pretrained QAModel model from list_available_models()
do_training: true # training mode, for testing change to false
trainer:
  gpus: 8 # number of GPUs (0 for CPU), or list of the GPUs to use e.g. [0, 1]
  num_nodes: 1
  max_epochs: 3
  max_steps: null # precedence over max_epochs
  accumulate_grad_batches: 1 # accumulates grads every k batches
  gradient_clip_val: 1.0
  amp_level: O1 # O1/O2 for mixed precision
  precision: 16 # Should be set to 16 for O1 and O2 to enable the AMP.
  accelerator: ddp
  log_every_n_steps: 5  # Interval of logging.
  val_check_interval: 1.0  # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  checkpoint_callback: False  # Provided by exp_manager
  logger: False  # Provided by exp_manager

model:
  nemo_path: null # filename to save the model and associated artifacts to .nemo file
  tokenizer:
      tokenizer_name: ${model.language_model.pretrained_model_name} # or sentencepiece
      vocab_file: null # path to vocab file
      tokenizer_model: null # only used if tokenizer is sentencepiece
      special_tokens: null

  language_model:
    pretrained_model_name: bert-base-cased
    lm_checkpoint: null
    config_file: null # json file, precedence over config
    config: null

  encoder:
    dropout: 0.1

  dataset:
    max_seq_length: 128 # the maximum length BERT supports is 512
    max_num_cat_slot: 6 # maximum number of different categorical slots per service in dataset 
    max_num_noncat_slot: 12 # maximum number of different non-categorical slots per service in dataset 
    max_value_per_cat_slot: 12 # maximum number of different categorical slot values per service in dataset 
    max_num_intent: 4 # maximum number of different intents per service in dataset 
    task_name: sgd_single_domain # or from [sgd_all, sgd_all_single, sgd_multi_domain, debug_sample]
    state_tracker: nemotracker # or baseline
    data_dir: ???
    dialogues_example_dir: ??? # cache location to store or load preprocessed data from. To use cache, specify `use_cache`
    subsample: false # balances negative and positive training examples for improved performance
    use_cache: false # uses a cache to store the processed dataset, you may use it for large datasets for speed up
    use_fuzzy_match: true # Whether to use fuzzy string matching when comparing non-categorical slot values. Should be set to False when conducting multiwoz style evaluation.
    joint_acc_across_turn: false # Whether to compute joint goal accuracy across turn instead of across service. Should be set to True when conducting multiwoz style evaluation.

  train_ds:
    ds_item: "train"
    batch_size: 128
    shuffle: true
    num_workers: 3
    drop_last: false
    pin_memory: false

  validation_ds:
    ds_item: ["dev"] # ["dev", "test"]
    batch_size: 8
    shuffle: false
    num_workers: 3
    drop_last: false
    pin_memory: false

  test_ds:
    ds_item: ["test"]
    batch_size: 8
    shuffle: false
    num_workers: 3
    drop_last: false
    pin_memory: false

  optim:
    name: adamw
    lr: 1e-4
    # optimizer arguments
    betas: [0.9, 0.999]
    weight_decay: 0.01

    # scheduler setup
    sched:
      name: PolynomialDecayAnnealing
      # Scheduler params
      warmup_steps: null
      warmup_ratio: 0.02
      last_epoch: -1
      # pytorch lightning args
      monitor: val_loss
      reduce_on_plateau: false

exp_manager:
  exp_dir: null  # exp_dir for your experiment, if None, defaults to "./nemo_experiments"
  name: "SGDQA"  # The name of your model
  create_tensorboard_logger: True  # Whether you want exp_manger to create a tb logger
  create_checkpoint_callback: True  # Whether you want exp_manager to create a modelcheckpoint callback
  resume_if_exists: false
  resume_ignore_no_checkpoint: false
